正则表达式(Regular Expression)是一种文本模式
#一、概述
##正则表达式字符
分为：
普通字符：a 到 z 之间的字母
特殊字符：特殊字符（称为"元字符"）

##正则表达式的模式
* 字面值字符：例如字母、数字、空格等，可以直接匹配它们自身。
* 特殊字符：例如点号 .、星号 *、加号 +、问号 ? 等，它们具有特殊的含义和功能。
* 字符类：用方括号 [ ] 包围的字符集合，用于匹配方括号内的任意一个字符。
* 元字符：例如 \d、\w、\s 等，用于匹配特定类型的字符，如数字、字母、空白字符等。
* 量词：例如 {n}、{n,}、{n,m} 等，用于指定匹配的次数或范围。
* 边界符号：例如 ^、$、\b、\B 等，用于匹配字符串的开头、结尾或单词边界位置。


##正则表达式的特性
* 字符匹配：
	* 普通字符：
	* 元字符：\d 匹配任意数字字符，\w 匹配任意字母数字字符，. 匹配任意字符
* 量词：
	* `*`： 匹配前面模式0次或多次。
	* `+`： 匹配前面模式1次或多次。
	* `?`： 匹配前面模式0次或1次。
	* `{n}`：匹配前面模式n次。
	* `{n,}`：匹配前面模式n次或多次。
	* `{n,m}：匹配前面的模式 x>=n&&x<=m
* 字符类：
	* `[]`：匹配括号内任意一个字符。
	* `[^]`：匹配除了括号内的字符以外的任意一个字符。
* 边界匹配：
	* `^`：匹配字符串的开头
	* `$`：匹配字符串的结尾
	* `\b`：匹配单词边界
	* `\B`：匹配非单词边界
* 分组和捕获：
	* `()`：用于分组和捕获子表达式
	*`(?)`：用于分组但不捕获子表达式
* 特殊字符：
	* `\`：转移字符，用于匹配特殊字符本身
	* `.`：匹配任意字符（除了换行符）。
	* `|`：用于指定多个模式的选择。
	
#二、语法
* 普通字符：
[ABC]
[^ABC]
[A-Z]
[a-z]
`.`:
* 相当于[^\n\r]
`[\s\S]`:
* `\s`：匹配所有空白符，包括换行。
* `\S`：非空白符，不包括换行。
`\w`:
* 匹配字母、数字、下划线 相当于[A-Za-z0-9_]




